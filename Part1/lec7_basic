----데이터분석을 위한 sql레시피 교재를 참고하여 작성된 쿼리입니다.

----------------------------------------------- 7강. 하나의 테이블에 대한 조작 -------------------------------------------------------


---- lec7_1. 그룹의 특징 잡기 ----

--테이블 만들기 : 상품 평가 테이블
DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec7_1;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec7_1 (
    user_id    string(255)
  , product_id string(255)
  , score      numeric
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec7_1
VALUES
    ('U001', 'A001', 4.0)
  , ('U001', 'A002', 5.0)
  , ('U001', 'A003', 5.0)
  , ('U002', 'A001', 3.0)
  , ('U002', 'A002', 3.0)
  , ('U002', 'A003', 4.0)
  , ('U003', 'A001', 5.0)
  , ('U003', 'A002', 4.0)
  , ('U003', 'A003', 4.0)
;
select * from inlaid-lane-373607.sqlr202301.lec7_1;


--1) 테이블 전체의 특징량 계산하기
select count(*) as total_count
, count(distinct user_id) as user_count
, count(distinct product_id) as product_count
, sum(score) as sum
, avg(score) as avg
, max(score) as max
, min(score) as min
from inlaid-lane-373607.sqlr202301.lec7_1;


--2) 그루핑한 데이터의 특징량 계산하기
select user_id
, count(*) as total_count
, count(distinct product_id) as product_count
, sum(score) as sum
, avg(score) as avg
, max(score) as max
, min(score) as min
from inlaid-lane-373607.sqlr202301.lec7_1
group by user_id;


--3) 집약함수를 적용한 값과 집약 전의 값을 동시에 다루기
-- 윈도 함수 partion by()를 이용해 집약 함수와 원래 값을 조합할 수 있음.
select user_id, product_id 
, score --개별 점수
, avg(score) over() as avg_score --전체 평균 점수
, avg(score) over(partition by user_id) as user_avg_score --사용자(user_id)별 평균 점수
, score-avg(score) over(partition by user_id) as user_avg_score_diff -- 개별 점수와 사용자별 평균 점수의 차이
from inlaid-lane-373607.sqlr202301.lec7_1;



---- lec7_2. 그룹 내부의 순서 ----
-- 테이블 만들기
DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec7_2;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec7_2(
    product_id string(255)
  , category   string(255)
  , score      numeric
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec7_2
VALUES
    ('A001', 'action', 94)
  , ('A002', 'action', 81)
  , ('A003', 'action', 78)
  , ('A004', 'action', 64)
  , ('D001', 'drama' , 90)
  , ('D002', 'drama' , 82)
  , ('D003', 'drama' , 78)
  , ('D004', 'drama' , 58)
;
select * from inlaid-lane-373607.sqlr202301.lec7_2;


--1) order by 구문을 사용해 테이블 내부 순서 다루기
select product_id, score
, row_number() over(order by score desc) as row --점수 순서로 유일한 순위를 붙임
, rank() over(order by score desc) as rank --같은 순위를 허용하여 순위를 붙임
, dense_rank() over(order by score desc) as dense_rank --같은 순위가 있을 경우, 다음 순위를 건너뛰고 그 다음 순위를 붙임.

, lag(product_id) over(order by score desc) as lag1 -- 현재 행보다 앞에 있는 행의 값 추출하기 
, lag(product_id, 2) over(order by score desc) as lag2 -- 현재 행보다 2행 앞에 있는 행의 값 추출하기

, lead(product_id) over(order by score desc) as lead1 -- 현재 행보다 뒤에 있는 행의 값 추출하기 
, lead(product_id, 2) over(order by score desc) as lead2 -- 현재 행보다 2행 뒤에 있는 행의 값 추출하기 

from inlaid-lane-373607.sqlr202301.lec7_2
order by row;


--2) order by 구문과 집약 함수를 조합해서 계산하기
select product_id, score
, row_number() over(order by score desc) as row --점수 순서로 유일한 순위를 붙임
, sum(score) over(order by score desc rows between unbounded preceding and current row) as cum_score --순위 상위부터 누계 점수 계산하기
, avg(score) over(order by score desc rows between 1 preceding and 1 following) as local_avg --현재 행과 앞 뒤의 행이 가진 값을 기반으로 평균 점수 계산하기
, first_value(product_id) over(order by score desc rows between unbounded preceding and unbounded following) as first_value --순위가 높은 상품 id추출하기
, last_value(product_id) over(order by score desc rows between unbounded preceding and unbounded following) as last_value --순위가 낮은 상품 id추출하기
from inlaid-lane-373607.sqlr202301.lec7_2
order by row;


--3) 윈도 함수를 사용해 카테고리들의 순위를 계산하는 쿼리
select category, product_id, score

--카테고리별로 점수를 정렬하고, 유일한 순위를 붙임
, row_number() over(partition by category order by score desc) as row 

-- 카테고리별로 같은 순위를 허가하고 순위를 붙임
, rank() over(partition by category order by score desc) as rank 

--카테고리별로 같은 순위가 있을 경우 같은 순위 다음에 있는 순위를 건너뛰고 순위를 붙임
, dense_rank() over(partition by category order by score desc) as dense_rank 
from inlaid-lane-373607.sqlr202301.lec7_2
order by category, row;


--4) 카테고리들의 순위 상위 2개까지의 상품을 추출하기
select * from (select category, product_id, score, row_number() over (partition by category order by score desc) as rank
from inlaid-lane-373607.sqlr202301.lec7_2) as popular_products_with_rank
where rank<=2
order by category, rank;


--5) 카테고리별 순위 최상위 상품을 추출하는 쿼리
select distinct category -- distinct구문을 활용해 중복을 제거
, first_value(product_id) 
over (partition by category order by score desc rows between unbounded preceding and unbounded following) as product_id --카테고리별 순위 최상위 상품 id추출
from inlaid-lane-373607.sqlr202301.lec7_2;

---- lec7_3. 세로 기반 데이터를 가로 기반으로 변환하기 ----
--테이블 만들기 : 날짜별 kpi데이터
DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec7_3_1;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec7_3_1 (
    dt        string(255)
  , indicator string(255)
  , val       integer
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec7_3_1
VALUES
    ('2017-01-01', 'impressions', 1800)
  , ('2017-01-01', 'sessions'   ,  500)
  , ('2017-01-01', 'users'      ,  200)
  , ('2017-01-02', 'impressions', 2000)
  , ('2017-01-02', 'sessions'   ,  700)
  , ('2017-01-02', 'users'      ,  250)
;

DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec7_3_2;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec7_3_2(
    purchase_id integer
  , product_id  string(255)
  , price       integer
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec7_3_2
VALUES
    (100001, 'A001', 3000)
  , (100001, 'A002', 4000)
  , (100001, 'A003', 2000)
  , (100002, 'D001', 5000)
  , (100002, 'D002', 3000)
  , (100003, 'A001', 3000)
;
select * from inlaid-lane-373607.sqlr202301.lec7_3_1;
select * from inlaid-lane-373607.sqlr202301.lec7_3_2;

--1) 행으로 저장된 지표 값을 열로 변환하는 쿼리
select dt
, max(case when indicator='impressions' then val end) as impressions
, max(case when indicator='sessions' then val end) as sessions
, max(case when indicator='users' then val end) as users
from inlaid-lane-373607.sqlr202301.lec7_3_1
group by dt
order by dt;


--2) 행을 집약해서 쉼표로 구분된 문자열로 변환하기
select purchase_id
, string_agg(product_id, ',') as product_ids -- 상품 id를 배열에 집약하고 쉼표로 구분된 문자열로 변환하기
from inlaid-lane-373607.sqlr202301.lec7_3_2
group by purchase_id
order by purchase_id;




---- lec7_4. 가로 기반 데이터를 세로 기반으로 변환하기 ----
--테이블 만들기:4분기 매출 테이블
DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec7_4_1;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec7_4_1 (
    year integer
  , q1   integer
  , q2   integer
  , q3   integer
  , q4   integer
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec7_4_1
VALUES
    (2015, 82000, 83000, 78000, 83000)
  , (2016, 85000, 85000, 80000, 81000)
  , (2017, 92000, 81000, NULL , NULL )
;

DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec7_4_2;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec7_4_2 (
    purchase_id integer
  , product_ids string(255)
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec7_4_2
VALUES
    (100001, 'A001,A002,A003')
  , (100002, 'D001,D002')
  , (100003, 'A001')
;

select * from inlaid-lane-373607.sqlr202301.lec7_4_1;
select * from inlaid-lane-373607.sqlr202301.lec7_4_2;


--1) 일련 번호를 가진 피벗 테이블을 사용해 행으로 변환하는 쿼리
select q.year
-- q1에서 q4까지의 레이블 이름 출력하기
, case 
when p.idx = 1 then 'q1'
when p.idx = 2 then 'q2'
when p.idx = 3 then 'q3'
when p.idx = 4 then 'q4'
end as quarter
-- q1에서 q4까지의 매출을 출력하기
, case
when p.idx = 1 then q.q1
when p.idx = 2 then q.q2
when p.idx = 3 then q.q3
when p.idx = 4 then q.q4
end as sales
from inlaid-lane-373607.sqlr202301.lec7_4_1 as q
cross join 
-- 행으로 전개하고 싶은 열의 수만큼 순번 테이블 만들기
(select 1 as idx
union all select 2 as idx
union all select 3 as idx
union all select 4 as idx
) as p;


--2) 테이블 함수를 사용해 배열을 행으로 전개하는 쿼리
select * from unnest(array['A001', 'A002', 'A003']) as product_id;


--3) 테이블 함수를 사용해 쉼표로 구분된 문자열 데이터를 행으로 전개하는 쿼리
select purchase_id, product_id
from inlaid-lane-373607.sqlr202301.lec7_4_2 as p cross join unnest(split(product_ids, ',')) as product_id;

