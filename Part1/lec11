----- lec11. 사용자 전체의 특징과 경향 찾기 -----
---테이블 만들기---

DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec11_1;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec11_1(
    user_id         string(255)
  , sex             string(255)
  , birth_date      string(255)
  , register_date   string(255)
  , register_device string(255)
  , withdraw_date   string(255)
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec11_1
VALUES
    ('U001', 'M', '1977-06-17', '2016-10-01', 'pc' , NULL        )
  , ('U002', 'F', '1953-06-12', '2016-10-01', 'sp' , '2016-10-10')
  , ('U003', 'M', '1965-01-06', '2016-10-01', 'pc' , NULL        )
  , ('U004', 'F', '1954-05-21', '2016-10-05', 'pc' , NULL        )
  , ('U005', 'M', '1987-11-23', '2016-10-05', 'sp' , NULL        )
  , ('U006', 'F', '1950-01-21', '2016-10-10', 'pc' , '2016-10-10')
  , ('U007', 'F', '1950-07-18', '2016-10-10', 'app', NULL        )
  , ('U008', 'F', '2006-12-09', '2016-10-10', 'sp' , NULL        )
  , ('U009', 'M', '2004-10-23', '2016-10-15', 'pc' , NULL        )
  , ('U010', 'F', '1987-03-18', '2016-10-16', 'pc' , NULL        )
;

DROP TABLE IF EXISTS inlaid-lane-373607.sqlr202301.lec11_2;
CREATE TABLE inlaid-lane-373607.sqlr202301.lec11_2(
    session  string(255)
  , user_id  string(255)
  , action   string(255)
  , category string(255)
  , products string(255)
  , amount   integer
  , stamp    string(255)
);

INSERT INTO inlaid-lane-373607.sqlr202301.lec11_2
VALUES
    ('989004ea', 'U001', 'purchase', 'drama' , 'D001,D002', 2000, '2016-11-03 18:10:00')
  , ('989004ea', 'U001', 'view'    , NULL    , NULL       , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'favorite', 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'review'  , 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D001'     , NULL, '2016-11-03 18:00:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D002'     , NULL, '2016-11-03 18:01:00')
  , ('989004ea', 'U001', 'add_cart', 'drama' , 'D001,D002', NULL, '2016-11-03 18:02:00')
  , ('989004ea', 'U001', 'purchase', 'drama' , 'D001,D002', 2000, '2016-11-03 18:10:00')
  , ('47db0370', 'U002', 'add_cart', 'drama' , 'D001'     , NULL, '2016-11-03 19:00:00')
  , ('47db0370', 'U002', 'purchase', 'drama' , 'D001'     , 1000, '2016-11-03 20:00:00')
  , ('47db0370', 'U002', 'add_cart', 'drama' , 'D002'     , NULL, '2016-11-03 20:30:00')
  , ('87b5725f', 'U001', 'add_cart', 'action', 'A004'     , NULL, '2016-11-04 12:00:00')
  , ('87b5725f', 'U001', 'add_cart', 'action', 'A005'     , NULL, '2016-11-04 12:00:00')
  , ('87b5725f', 'U001', 'add_cart', 'action', 'A006'     , NULL, '2016-11-04 12:00:00')
  , ('9afaf87c', 'U002', 'purchase', 'drama' , 'D002'     , 1000, '2016-11-04 13:00:00')
  , ('9afaf87c', 'U001', 'purchase', 'action', 'A005,A006', 1000, '2016-11-04 15:00:00')
;

----------------- 1) 본격 분석을 위한 기본기 다지기 ------------------

--1) 액션 수와 비율을 계산하기 (사용률 집계)
with 
stats as (
  select count(distinct session) as total_uu -- 유니크한 사용자 수
  from inlaid-lane-373607.sqlr202301.lec11_2 
)
select l.action, 
count(distinct l.action) as action_uu, --유니크한 액션의 수
count(1) as action_count, --전체 액션의 수
s.total_uu, -- 전체 사용자 수
100*count(distinct l.session) / s.total_uu as usage_rate, -- 전체 사용자 수에서 특정 액션 사용자  수를 나눈 사용률 구하기
1*count(1) / count(distinct l.session) as count_per_user -- 사용자가 평균적으로 액션을 몇 번했는지 알아보는 명당 액션 수 구하기
from inlaid-lane-373607.sqlr202301.lec11_2 as l
cross join
stats as s
group by l.action, s.total_uu;


--2) 로그인 상태를 판별하기
with
action_log_status as (
  select session, user_id, action,
  case when coalesce(user_id, '') <> '' then 'login' else 'guest' end as login_status
  from inlaid-lane-373607.sqlr202301.lec11_2 
)
select * from action_log_status;


--4) 회원 상태를 판별하기 (회원, 비회원)
with
action_log_status as (
  select session, user_id, action,
  case when coalesce(max(user_id) over(partition by session order by stamp rows between unbounded preceding and current row), '') <> ''
  then 'member' else 'none' end as member_status
  , stamp
  from inlaid-lane-373607.sqlr202301.lec11_2 
)
select * from action_log_status;


---6) 연령별 구분 집계 
with
mst_users_birth as(
  select *, 20230213 as int_spec_date, cast(replace(substr(birth_date, 1, 10), '-','') as int64) as int_birth_date -- 특정 날짜를 정수로 변환하기
  from inlaid-lane-373607.sqlr202301.lec11_1)
, mst_users_age as(
  select * , floor((int_spec_date - int_birth_date) / 10000) as age -- 특정날짜에서 생일을 빼고, 10000으로 나눠서 나이 계산하기
  from mst_users_birth
)
, mst_users_category as (
  select user_id, sex,age,
  concat(case when 20 <= age then sex else '' end, -- 20세 이상이라면 카테고리 칼럼에 들어가는 값 첫 문자에 성별 문자를 결합
  case 
  when age between 4 and 12 then 'C'
  when age between 13 and 19 then 'T'
  when age between 20 and 34 then '1'
  when age between 35 and 49 then '2'
  when age >= 50 then '3'
  end -- 각 조건에 따라 연령별 단어를 부여
) as category
from mst_users_age)
select * from mst_users_category;


---7) 연령별 구분의 사람 수를 계산하기
with
mst_users_birth as(
  select *, 20230213 as int_spec_date, cast(replace(substr(birth_date, 1, 10), '-','') as int64) as int_birth_date -- 특정 날짜를 정수로 변환하기
  from inlaid-lane-373607.sqlr202301.lec11_1)
, mst_users_age as(
  select * , floor((int_spec_date - int_birth_date) / 10000) as age -- 특정날짜에서 생일을 빼고, 10000으로 나눠서 나이 계산하기
  from mst_users_birth
)
, mst_users_category as (
  select user_id, sex,age,
  concat(case when 20 <= age then sex else '' end, -- 20세 이상이라면 카테고리 칼럼에 들어가는 값 첫 문자에 성별 문자를 결합
  case 
  when age between 4 and 12 then 'C'
  when age between 13 and 19 then 'T'
  when age between 20 and 34 then '1'
  when age between 35 and 49 then '2'
  when age >= 50 then '3'
  end -- 각 조건에 따라 연령별 단어를 부여
) as category
from mst_users_age)
select category, count(1) as user_count -- count(1)은 count(*)와 같이 모든 칼럼을 카운팅한다.
from mst_users_category
group by category;

---8) 연령별 구분의 특징 집계하기
with
mst_users_birth as(
  select *, 20230213 as int_spec_date, cast(replace(substr(birth_date, 1, 10), '-','') as int64) as int_birth_date -- 특정 날짜를 정수로 변환하기
  from inlaid-lane-373607.sqlr202301.lec11_1)
, mst_users_age as(
  select * , floor((int_spec_date - int_birth_date) / 10000) as age -- 특정날짜에서 생일을 빼고, 10000으로 나눠서 나이 계산하기
  from mst_users_birth
)
, mst_users_category as (
  select user_id, sex,age,
  concat(case when 20 <= age then sex else '' end, -- 20세 이상이라면 카테고리 칼럼에 들어가는 값 첫 문자에 성별 문자를 결합
  case 
  when age between 4 and 12 then 'C'
  when age between 13 and 19 then 'T'
  when age between 20 and 34 then '1'
  when age between 35 and 49 then '2'
  when age >= 50 then '3'
  end -- 각 조건에 따라 연령별 단어를 부여
) as category
from mst_users_age)
select 
p.category as product_category,
u.category as user_category,
count(*) as purchase_count
from 
inlaid-lane-373607.sqlr202301.lec11_2 as p 
join
mst_users_category as u on p.user_id = u.user_id -- user_id를 기준으로 기존 로그 테이블과 유저카테고리의 중복되는 칼럼을 조인함. 
where action='purchase' -- 구매한 사람만 선택되게 함.
group by p.category, u.category --카테고리 별로 그룹화함.
order by p.category, u.category;


---9) 한 주에 며칠 사용되었는지 집계하는 쿼리
with
action_log_dt as (
  select *,
  substr(stamp, 1, 10) as dt
  from inlaid-lane-373607.sqlr202301.lec11_2
)
, action_day_count_per_user as (
  select user_id, count(distinct dt) as action_day_count
  from action_log_dt
  where dt between '2016-11-01' and '2016-11-07'
  group by user_id
)
select action_day_count, count(distinct user_id) as user_count
from action_day_count_per_user
group by action_day_count
order by action_day_count;


---10) 사용자의 방문빈도를 토대로 구성비와 구성비누계 계산하기
with
action_log_dt as (
  select *,
  substr(stamp, 1, 10) as dt
  from inlaid-lane-373607.sqlr202301.lec11_2
)
, action_day_count_per_user as (
  select user_id, count(distinct dt) as action_day_count
  from action_log_dt
  where dt between '2016-11-01' and '2016-11-07'
  group by user_id
)
select action_day_count,
count (distinct user_id) as user_count,
100*count(distinct user_id) / sum(count(distinct user_id)) over() as composition_ratio, --구성비
100*sum(count(distinct user_id)) over(order by action_day_count rows between unbounded preceding and current row) / sum(count(distinct user_id)) over() as cumulative_ratio --구성비누계
from action_day_count_per_user
group by action_day_count
order by action_day_count;
